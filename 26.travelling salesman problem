#include<stdio.h>
#include<limits.h>  
#include<string.h>
#define MAX_N 15 
int n,cost[MAX_N][MAX_N],dp[1 << MAX_N][MAX_N];
#ifndef min
#define min(a, b) ((a) < (b) ? (a) : (b))
#endif
int tsp(int mask, int pos) 
{  
    if (mask == (1 << n) - 1) 
	{  
        return cost[pos][0]; 
    }  
  
    if (dp[mask][pos] != -1) 
	{  
        return dp[mask][pos];  
    }  
  
    int ans = INT_MAX,next;  
    for ( next = 0; next < n; next++) 
	{  
        if ((mask & (1 << next)) == 0) 
		{ 
            int newCost = cost[pos][next] + tsp(mask | (1 << next), next);  
            ans = min(ans, newCost);  
        }  
    }  
  
    return dp[mask][pos] = ans;  
}  
int main() 
{  
int i,j;
    printf("Enter the number of cities: ");  
    scanf("%d", &n);  
    printf("Enter the cost matrix:\n");  
    for ( i = 0; i < n; i++) 
	{  
        for ( j = 0; j < n; j++) 
		{  
            scanf("%d", &cost[i][j]);  
        }  
    }  
    memset(dp, -1, sizeof(dp));  
    int minCost = INT_MAX; 
    minCost = tsp(1, 0); 
    printf("Minimum cost of the TSP: %d\n", minCost);   
    return 0;  
}
