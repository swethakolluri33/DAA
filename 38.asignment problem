#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define N 4
typedef struct {
    int cost;
    int assigned[N], rowMask[N], colMask[N];
} State;

State initState() {
	int i;
    State s = {0};
    for ( i = 0; i < N; i++) s.assigned[i] = -1;
    return s;
}

void copyState(State *src, State *dst) {
    *dst = *src;
}

int reduceMatrix(int costMatrix[N][N], State *s) {
    int cost = 0,i,j;
    for ( i = 0; i < N; i++) {
        int minVal = INT_MAX;
        for ( j = 0; j < N; j++)
            if (!s->rowMask[i] && costMatrix[i][j] < minVal)
                minVal = costMatrix[i][j];
        if (minVal != INT_MAX) {
            cost += minVal;
            for ( j = 0; j < N; j++)
                if (!s->rowMask[i] && costMatrix[i][j] != INT_MAX)
                    costMatrix[i][j] -= minVal;
        }
    }
    return cost;
}

void branchAndBound(int costMatrix[N][N], State *s, int k, int *minCost, State *minState) {
	int i;
    if (k == N) {
        if (s->cost < *minCost) {
            *minCost = s->cost;
            copyState(s, minState);
        }
        return;
    }
    for ( i = 0; i < N; i++) {
        if (!s->rowMask[k] && !s->colMask[i]) {
            State newState;
            copyState(s, &newState);
            newState.assigned[k] = i;
            newState.rowMask[k] = newState.colMask[i] = 1;
            newState.cost = s->cost + costMatrix[k][i] + reduceMatrix(costMatrix, &newState);
            if (newState.cost < *minCost)
                branchAndBound(costMatrix, &newState, k + 1, minCost, minState);
        }
    }
}

void printAssignments(State *s) {
	int i;
    printf("Assigned Tasks:\n");
    for ( i = 0; i < N; i++) printf("Worker %d -> Task %d\n", i, s->assigned[i]);
    printf("Minimum Cost: %d\n", s->cost);
}

void solveAssignmentProblem(int costMatrix[N][N]) {
    State initialState = initState(), minState = initState();
    int minCost = INT_MAX;
    initialState.cost = reduceMatrix(costMatrix, &initialState);
    branchAndBound(costMatrix, &initialState, 0, &minCost, &minState);
    printf("Optimal Assignment:\n");
    printAssignments(&minState);
}

int main() {
    int costMatrix[N][N] = {{1, 2, 7, 8}, {6, 4, 3, 7}, {5, 8, 1, 8}, {7, 6, 9, 4}};
    solveAssignmentProblem(costMatrix);
    return 0;
}
